import getIdGenerator from "../utils/uniqueId";

export interface IconComponentConfig {
    description: string,
    importDir: string,
    icons: string[],
    lazyIcons: string[],
    time: boolean,
    componentName: string,
    cssClass: string,
    wrapNamespace: boolean,
    customCode: string,
}

export function generateIconComponent({
    description,
    importDir,
    icons,
    lazyIcons,
    time,
    cssClass,
    componentName,
    wrapNamespace,
    customCode,
}: IconComponentConfig) {

    const iconImports = icons.map((i, idx) => `import _${idx} from '${importDir}/${i}';`).join('\n');
    const lazyIconImports = lazyIcons.map((i, idx) => `const _${idx}_lz = React.lazy(() => import('${importDir}/${i}'));`).join('\n');
    let iconMapKeys: string =
        icons.map((i, idx) => `    "${i}": _${idx},`).join('\n') + '\n' +
        lazyIcons.map((i, idx) => `    "${i}": _${idx}_lz,`).join('\n');

    const propsExtends = " extends React.ComponentPropsWithRef<'svg'>";

    const propsInterface = wrapNamespace
        ? ''
        : `\
export interface ${componentName}Props${propsExtends} {
    icon: keyof typeof iconMap;
    children?: null | undefined;
}
`;

    const namespaceExport = wrapNamespace
        ? `\
export namespace ${componentName} {
    export interface Props${propsExtends} {
        icon: keyof typeof iconMap;
        children?: null | undefined;
    }
}
`
        : '';

    const propsInterfaceName = wrapNamespace
        ? `${componentName}.Props`
        : `${componentName}Props`;

    return `\
/* eslint-disable */
/**
 * Generated by react-gen
 * 
${description ? ' * ' + description + '\n\n' : ''}\
 * The changes will be lost the next time you update the icons.
 * Define custom code snippet in the configuartion file if needed.
${time ? " * @time " + new Date().toLocaleString() : ''}
 */
${customCode}
import React, { Suspense } from 'react';

/**
 * The "missing" icon and the "loading" icon.
 * 
 * Replace with your own by renaming your icon file the same as below.
 */
import __missing from '${importDir}/__missing';
import __loading from '${importDir}/__loading';

// Import icons
${iconImports}

// Import icons lazily
${lazyIconImports}

// Build icon map
const iconMap = {
${iconMapKeys}
};

${propsInterface}\
export const ${componentName} = React.forwardRef<SVGSVGElement, ${propsInterfaceName}>(({
    icon, className = '', ...otherProps
}, ref) => {

    // Access the icon component in the object map
    const IconComponent = iconMap[icon] || __missing;

    return (
        <Suspense fallback={<__loading data-icon-name='__loading' idSuffix={getNextId().toString()} className={\`${cssClass} \${className}\`} />}>
            <IconComponent data-icon-name={icon} idSuffix={getNextId().toString()} className={\`${cssClass} \${className}\`} {...otherProps} ref={ref} />
        </Suspense>
    );
})

${namespaceExport}\

let currentId = 0;
function getNextId(){
    if(currentId === Number.MAX_SAFE_INTEGER)
        currentId = 0;
    return currentId++;
}
`
}

const { nextId } = getIdGenerator();
export function generateIcon(svgContent: string) {
    // console.log(svgContent);
    // Parse props and ref attribute.
    let parsedSvgContent = svgContent
        .replace(/(?<=<svg[\s\S]*?(?=>))>/, " {...otherProps} ref={ref}>");
    // Configure all 'id' attribute to accept a suffix string
    let found = null;
    while (found = parsedSvgContent.match(/id=".*?"/)) {
        // Get the value of the id
        const idValue = found[0].match(/(?<=id=").*?(?=")/)[0];
        const replacedIdValue = `__rgicon__${nextId()}__\${idSuffix}`;
        const replacedIdAttr = `id={\`${replacedIdValue}\`}`;
        // Find all url references to this id value and replace
        parsedSvgContent = parsedSvgContent.replace(
            new RegExp(`"url\\(#${idValue}\\)"`, 'g'),
            `{\`url(#${replacedIdValue})\`}`);
        // Find the rest usages of this id value
        parsedSvgContent = parsedSvgContent.replace(
            new RegExp(`"#${idValue}"`, 'g'),
            `{\`#${replacedIdValue}\`}`);

        parsedSvgContent = parsedSvgContent.replace(/id=".*?"/, replacedIdAttr);
        // console.log(`\nidValue:${idValue}; searchStr:${`"url(#${idValue})"`} replacedIdValue:${replacedIdValue}; replacedIdAttr:${replacedIdAttr}\n`);
    }

    return `\
import React from "react";\
interface __rgiconProps extends React.SVGAttributes<SVGSVGElement>{\
idSuffix: string;\
}\
export default React.forwardRef<SVGSVGElement, __rgiconProps>(({idSuffix, ...otherProps}, ref): JSX.Element => ${parsedSvgContent});`
}